3 states:
	eat
	think
	sleep.


After eating -> sleeping -> thinking
2 forks are needed


Your(s) program(s) should take the following arguments:
	number_of_philosophers 
	time_to_die 
	time_to_eat 
	time_to_sleep
	[number_of_times_each_philosopher_must_eat]

number_of_philosophers: The number of philosophers and also the number of forks.
time_to_die (in milliseconds): If a philosopher didnâ€™t start eating time_to_die milliseconds since the beginning of their last meal or the beginning of the simulation, they die.
time_to_eat (in milliseconds): The time it takes for a philosopher to eat.
	During that time, they will need to hold two forks.
time_to_sleep (in milliseconds): The time a philosopher will spend sleeping.
number_of_times_each_philosopher_must_eat (optional argument):
If all philosophers have eaten at least number_of_times_each_philosopher_must_eat times, the simulation stops. If not specified, the simulation stops when a philosopher dies.


logic:
1) take inputs
2) check if only numbers < INT MAX && > INT MIN
3) check if only 1 philo or not
	if 1, create 1 thread
4) if not then create a main thread that will be checking for statuses
5) create and assign struct that will be used for each struct
6)


pause until all philo
add status for death for threads
increase the time for everybody